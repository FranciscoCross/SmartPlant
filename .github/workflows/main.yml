name: Main
## Workflow for enviroments
on:
  push:
    branches:
      - dev
      - qa
      - main
  pull_request:
    branches:
      - dev
      - qa
      - main

  # Esta línea permite accionar el workflow manualmente desde GitHub Actions, muy útil para testear correrlo incluso en otras ramas
  workflow_dispatch:

env:
  SONAR_VERSION: "5.0.1.3006"
# Dirección del servidor MQTT a conectarse
  MQTT_SERV: ${{ vars.MQTT_SERV }}
# Contraseña del Access Point que ofrece WifiManager para configurar las credenciales
  WMAP_PASS: ${{ secrets.WMAP_PASS }}
# Comando para leer la Versión del Firmware actualizada en el repositorio
  VERSION: $(awk '/#define FIRMWARE_VERSION/ {print $NF}' ./include/param.hpp)

jobs:
  analyze-codeql:
    name: Analyze-CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    #This step runs only in the cpp workflow run
    - if: matrix.language == 'cpp'
      name: Build with PlatformIO
      run: |
        curl -fsSL -o get-platformio.py https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py
        python3 get-platformio.py
        /home/runner/.platformio/penv/bin/platformio run --environment nodemcu-32s
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  sonarqube:
    name: Sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - uses: sonarsource/sonarqube-scan-action@master
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: "Download SonarQube Requirements"
        run: |
          pwd
          mkdir -p sonarqube
          cd sonarqube
          wget --no-verbose https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip -qq build-wrapper-linux-x86.zip
          rm build-wrapper-linux-x86.zip
          wget --no-verbose https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_VERSION }}-linux.zip
          unzip -qq sonar-scanner-cli-${{ env.SONAR_VERSION }}-linux.zip
          rm sonar-scanner-cli-${{ env.SONAR_VERSION }}-linux.zip
          mkdir -p output
          cd ..
          ./sonarqube/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ./sonarqube/output/ platformio run
          echo ${{ secrets.SONAR_TOKEN }}
          echo ${{ secrets.SONAR_HOST_URL }}
          ./sonarqube/sonar-scanner-${{ env.SONAR_VERSION }}-linux/bin/sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
  unit_tests:
    name: Unit-Tests
    runs-on: self-hosted    
    steps:    
      - uses: actions/checkout@v3
      - name: "unit tests"
        run: |
          echo "Unit Tests"
          pio test -vv

  build-upload-dev:
    name: Build-Upload
    runs-on: self-hosted   
    if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/dev'
    steps: 
      - uses: actions/checkout@v3
      - name: "Set firmware version"
        run: |
          echo "VERSION=${{ env.VERSION }}"
      - name: "build firmware"
        run: |
          pio run --target upload --environment nodemcu-32s 
      - name: "platformio check with cppcheck"
        run: |
          pio check --fail-on-defect=high
          echo "Platformio Check finalizado"
      - name: "set new version to update server"
        run: |
          cp .pio/build/nodemcu-32s/firmware.bin /home/runner/firmware/dev/update/firmware-${{ env.VERSION }}.bin
          echo "Firmware.bin compilado y copiado a /home/runner/firmware/update"
          cp /home/runner/firmware/dev/update/update.json update.json
          jq --argjson version_arg ${{ env.VERSION }} '.version |= $version_arg | .version |= tonumber' update.json > tmp && mv tmp update.json
          cp update.json /home/runner/firmware/dev/update/update.json
          echo "update.json actualizado con la ultima version: ${{ env.VERSION }}"
