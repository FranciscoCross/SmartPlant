name: Build and Upload

on:
  # Se activa este workflow automáticamente cada vez que se hace un Pull Request hacia la rama "main", que contenga cambios en src include o test
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/*'
      - 'include/*'
      - 'test/*'

  # Esta línea permite accionar el workflow manualmente desde GitHub Actions, muy útil para testear correrlo incluso en otras ramas
  workflow_dispatch:

env:
# Dirección del servidor MQTT a conectarse
  MQTT_SERV: ${{ secrets.MQTT_SERV }}
# Contraseña del Access Point que ofrece WifiManager para configurar las credenciales
  WMAP_PASS: ${{ secrets.WMAP_PASS }}
# Comando para leer la Versión del Firmware actualizada en el repositorio
  VERSION: $(awk '/#define FIRMWARE_VERSION/ {print $NF}' ./include/param.hpp)

jobs:
  build:
    name: "Build-Test-Upload"
    runs-on: self-hosted    
    steps:    
      - uses: actions/checkout@v3
      - name: "unit tests"
        run: |
          echo "Unit Tests"
          pio test -vv
      - name: "Set firmware version"
        run: |
          echo "VERSION=${{ env.VERSION }}"
      - name: "build firmware"
        run: |
          pio run --target upload --environment nodemcu-32s 
      - name: "platformio check with cppcheck"
        run: |
          pio check --fail-on-defect=high
          echo "Platformio Check finalizado"
      - name: "set new version to update server"
        run: |
          cp .pio/build/nodemcu-32s/firmware.bin /home/runner/firmware/update/firmware-${{ env.VERSION }}.bin
          echo "Firmware.bin compilado y copiado a /home/runner/firmware/update"
          cp /home/runner/firmware/update/update.json update.json
          jq --argjson version_arg ${{ env.VERSION }} '.version |= $version_arg | .version |= tonumber' update.json > tmp && mv tmp update.json
          cp update.json /home/runner/firmware/update/update.json
          echo "update.json actualizado con la ultima version: ${{ env.VERSION }}"
